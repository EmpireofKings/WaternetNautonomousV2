classdef MissionPlanGoal < robotics.ros.Message
    %MissionPlanGoal MATLAB implementation of nautonomous_mission_msgs/MissionPlanGoal
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'nautonomous_mission_msgs/MissionPlanGoal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5c6fba5d54eb03aa61ec8f4e9d53b6d8' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NautonomousMissionMsgsOperationPlanClass = robotics.ros.msg.internal.MessageFactory.getClassForType('nautonomous_mission_msgs/OperationPlan') % Dispatch to MATLAB class for message type nautonomous_mission_msgs/OperationPlan
    end
    
    properties (Dependent)
        Mac
        Token
        Operations
    end
    
    properties (Access = protected)
        Cache = struct('Operations', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Mac', 'Operations', 'Token'} % List of non-constant message properties
        ROSPropertyList = {'mac', 'operations', 'token'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MissionPlanGoal(msg)
            %MissionPlanGoal Construct the message object MissionPlanGoal
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function mac = get.Mac(obj)
            %get.Mac Get the value for property Mac
            mac = char(obj.JavaMessage.getMac);
        end
        
        function set.Mac(obj, mac)
            %set.Mac Set the value for property Mac
            validateattributes(mac, {'char'}, {}, 'MissionPlanGoal', 'Mac');
            
            obj.JavaMessage.setMac(mac);
        end
        
        function token = get.Token(obj)
            %get.Token Get the value for property Token
            token = char(obj.JavaMessage.getToken);
        end
        
        function set.Token(obj, token)
            %set.Token Set the value for property Token
            validateattributes(token, {'char'}, {}, 'MissionPlanGoal', 'Token');
            
            obj.JavaMessage.setToken(token);
        end
        
        function operations = get.Operations(obj)
            %get.Operations Get the value for property Operations
            if isempty(obj.Cache.Operations)
                javaArray = obj.JavaMessage.getOperations;
                array = obj.readJavaArray(javaArray, obj.NautonomousMissionMsgsOperationPlanClass);
                obj.Cache.Operations = feval(obj.NautonomousMissionMsgsOperationPlanClass, array);
            end
            operations = obj.Cache.Operations;
        end
        
        function set.Operations(obj, operations)
            %set.Operations Set the value for property Operations
            if ~isvector(operations) && isempty(operations)
                % Allow empty [] input
                operations = feval([obj.NautonomousMissionMsgsOperationPlanClass '.empty'], 0, 1);
            end
            
            validateattributes(operations, {obj.NautonomousMissionMsgsOperationPlanClass}, {'vector'}, 'MissionPlanGoal', 'Operations');
            
            javaArray = obj.JavaMessage.getOperations;
            array = obj.writeJavaArray(operations, javaArray, obj.NautonomousMissionMsgsOperationPlanClass);
            obj.JavaMessage.setOperations(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Operations)
                obj.Cache.Operations = [];
                obj.Cache.Operations = obj.Operations;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Operations = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Mac = obj.Mac;
            cpObj.Token = obj.Token;
            
            % Recursively copy compound properties
            cpObj.Operations = copy(obj.Operations);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Mac = strObj.Mac;
            obj.Token = strObj.Token;
            OperationsCell = arrayfun(@(x) feval([obj.NautonomousMissionMsgsOperationPlanClass '.loadobj'], x), strObj.Operations, 'UniformOutput', false);
            obj.Operations = vertcat(OperationsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Mac = obj.Mac;
            strObj.Token = obj.Token;
            strObj.Operations = arrayfun(@(x) saveobj(x), obj.Operations);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.nautonomous_mission_msgs.MissionPlanGoal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.nautonomous_mission_msgs.MissionPlanGoal;
            obj.reload(strObj);
        end
    end
end
