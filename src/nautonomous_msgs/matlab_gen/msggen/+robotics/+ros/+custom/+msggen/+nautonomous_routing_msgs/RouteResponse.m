classdef RouteResponse < robotics.ros.Message
    %RouteResponse MATLAB implementation of nautonomous_routing_msgs/RouteResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'nautonomous_routing_msgs/RouteResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '268181c8cb9f7cb324844e9b49f87349' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPose2DClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose2D') % Dispatch to MATLAB class for message type geometry_msgs/Pose2D
    end
    
    properties (Dependent)
        Route
        RouteIds
    end
    
    properties (Access = protected)
        Cache = struct('Route', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Route', 'RouteIds'} % List of non-constant message properties
        ROSPropertyList = {'route', 'route_ids'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RouteResponse(msg)
            %RouteResponse Construct the message object RouteResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function route = get.Route(obj)
            %get.Route Get the value for property Route
            if isempty(obj.Cache.Route)
                javaArray = obj.JavaMessage.getRoute;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPose2DClass);
                obj.Cache.Route = feval(obj.GeometryMsgsPose2DClass, array);
            end
            route = obj.Cache.Route;
        end
        
        function set.Route(obj, route)
            %set.Route Set the value for property Route
            if ~isvector(route) && isempty(route)
                % Allow empty [] input
                route = feval([obj.GeometryMsgsPose2DClass '.empty'], 0, 1);
            end
            
            validateattributes(route, {obj.GeometryMsgsPose2DClass}, {'vector'}, 'RouteResponse', 'Route');
            
            javaArray = obj.JavaMessage.getRoute;
            array = obj.writeJavaArray(route, javaArray, obj.GeometryMsgsPose2DClass);
            obj.JavaMessage.setRoute(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Route)
                obj.Cache.Route = [];
                obj.Cache.Route = obj.Route;
            end
        end
        
        function routeids = get.RouteIds(obj)
            %get.RouteIds Get the value for property RouteIds
            javaArray = obj.JavaMessage.getRouteIds;
            array = obj.readJavaArray(javaArray, 'int32');
            routeids = int32(array);
        end
        
        function set.RouteIds(obj, routeids)
            %set.RouteIds Set the value for property RouteIds
            if ~isvector(routeids) && isempty(routeids)
                % Allow empty [] input
                routeids = int32.empty(0,1);
            end
            
            validateattributes(routeids, {'numeric'}, {'vector'}, 'RouteResponse', 'RouteIds');
            
            javaArray = obj.JavaMessage.getRouteIds;
            array = obj.writeJavaArray(routeids, javaArray, 'int32');
            obj.JavaMessage.setRouteIds(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Route = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.RouteIds = obj.RouteIds;
            
            % Recursively copy compound properties
            cpObj.Route = copy(obj.Route);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RouteIds = strObj.RouteIds;
            RouteCell = arrayfun(@(x) feval([obj.GeometryMsgsPose2DClass '.loadobj'], x), strObj.Route, 'UniformOutput', false);
            obj.Route = vertcat(RouteCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RouteIds = obj.RouteIds;
            strObj.Route = arrayfun(@(x) saveobj(x), obj.Route);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.nautonomous_routing_msgs.RouteResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.nautonomous_routing_msgs.RouteResponse;
            obj.reload(strObj);
        end
    end
end
