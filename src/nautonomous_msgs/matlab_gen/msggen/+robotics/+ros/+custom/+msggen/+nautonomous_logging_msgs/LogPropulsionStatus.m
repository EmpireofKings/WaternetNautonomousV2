classdef LogPropulsionStatus < robotics.ros.Message
    %LogPropulsionStatus MATLAB implementation of nautonomous_logging_msgs/LogPropulsionStatus
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'nautonomous_logging_msgs/LogPropulsionStatus' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ee296995714eebd6789a28be896513b6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Name
        Mac
        Token
        Level
        Message
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'Level', 'Mac', 'Message', 'Name', 'Token'} % List of non-constant message properties
        ROSPropertyList = {'header', 'level', 'mac', 'message', 'name', 'token'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = LogPropulsionStatus(msg)
            %LogPropulsionStatus Construct the message object LogPropulsionStatus
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'LogPropulsionStatus', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            validateattributes(name, {'char'}, {}, 'LogPropulsionStatus', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function mac = get.Mac(obj)
            %get.Mac Get the value for property Mac
            mac = char(obj.JavaMessage.getMac);
        end
        
        function set.Mac(obj, mac)
            %set.Mac Set the value for property Mac
            validateattributes(mac, {'char'}, {}, 'LogPropulsionStatus', 'Mac');
            
            obj.JavaMessage.setMac(mac);
        end
        
        function token = get.Token(obj)
            %get.Token Get the value for property Token
            token = char(obj.JavaMessage.getToken);
        end
        
        function set.Token(obj, token)
            %set.Token Set the value for property Token
            validateattributes(token, {'char'}, {}, 'LogPropulsionStatus', 'Token');
            
            obj.JavaMessage.setToken(token);
        end
        
        function level = get.Level(obj)
            %get.Level Get the value for property Level
            level = typecast(int8(obj.JavaMessage.getLevel), 'uint8');
        end
        
        function set.Level(obj, level)
            %set.Level Set the value for property Level
            validateattributes(level, {'numeric'}, {'nonempty', 'scalar'}, 'LogPropulsionStatus', 'Level');
            
            obj.JavaMessage.setLevel(level);
        end
        
        function message = get.Message(obj)
            %get.Message Get the value for property Message
            message = char(obj.JavaMessage.getMessage);
        end
        
        function set.Message(obj, message)
            %set.Message Set the value for property Message
            validateattributes(message, {'char'}, {}, 'LogPropulsionStatus', 'Message');
            
            obj.JavaMessage.setMessage(message);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Name = obj.Name;
            cpObj.Mac = obj.Mac;
            cpObj.Token = obj.Token;
            cpObj.Level = obj.Level;
            cpObj.Message = obj.Message;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Name = strObj.Name;
            obj.Mac = strObj.Mac;
            obj.Token = strObj.Token;
            obj.Level = strObj.Level;
            obj.Message = strObj.Message;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Name = obj.Name;
            strObj.Mac = obj.Mac;
            strObj.Token = obj.Token;
            strObj.Level = obj.Level;
            strObj.Message = obj.Message;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.nautonomous_logging_msgs.LogPropulsionStatus.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.nautonomous_logging_msgs.LogPropulsionStatus;
            obj.reload(strObj);
        end
    end
end
